var o=Object.defineProperty;var c=(i,t,e)=>t in i?o(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var s=(i,t,e)=>c(i,typeof t!="symbol"?t+"":t,e);class l{constructor(){s(this,"transactions",new Map);s(this,"batches",new Map);s(this,"listeners",new Set);console.log("🚀 Heru Pharmaceutical Network initialized - Real blockchain mode"),this.initializeRealTimeListeners()}initializeRealTimeListeners(){console.log("🔄 Initializing real-time blockchain listeners..."),this.startRealTimeMonitoring()}startRealTimeMonitoring(){console.log("📡 Monitoring live blockchain transactions..."),setInterval(()=>{this.pollForNewTransactions()},5e3)}async pollForNewTransactions(){try{console.log("🔍 Polling for new pharmaceutical batch transactions...")}catch(t){console.error("❌ Failed to poll for transactions:",t)}}addTransactionListener(t){this.listeners.add(t)}removeTransactionListener(t){this.listeners.delete(t)}notifyListeners(t){this.listeners.forEach(e=>e(t))}async monitorTransaction(t,e,n){const a={id:t,type:e,timestamp:new Date().toISOString(),status:"SUCCESS",details:n,metadata:{}};return this.transactions.set(t,a),this.notifyListeners({type:"TRANSACTION_ADDED",data:a}),n.batchNumber&&this.updateBatchTransaction(n.batchNumber,a),a}async createBatchRecord(t){const e={batchNumber:t.batchNumber,tokenId:t.tokenId||"",nftId:t.nftId||"",manufacturerDid:t.manufacturerDid||"",productName:t.productName||"Unknown Product",manufacturingDate:t.manufacturingDate||new Date().toISOString().split("T")[0],expiryDate:t.expiryDate||new Date(Date.now()+31536e6).toISOString().split("T")[0],status:"PENDING",transactions:t.transactions||[],guardianVc:t.guardianVc,ipfsHash:t.ipfsHash,metadataHash:t.metadataHash,verificationUrl:`/verify/${t.batchNumber}`};return this.batches.set(e.batchNumber,e),this.notifyListeners({type:"BATCH_CREATED",data:e}),e}updateBatchTransaction(t,e){const n=this.batches.get(t);if(n){const a=n.transactions.findIndex(r=>r.id===e.id);a>=0?n.transactions[a]=e:n.transactions.unshift(e),this.batches.set(t,n),this.notifyListeners({type:"BATCH_UPDATED",data:n})}}getRecentTransactions(t=50){return Array.from(this.transactions.values()).sort((e,n)=>new Date(n.timestamp).getTime()-new Date(e.timestamp).getTime()).slice(0,t)}getAllBatches(){return Array.from(this.batches.values()).sort((t,e)=>new Date(e.manufacturingDate).getTime()-new Date(t.manufacturingDate).getTime())}getBatch(t){return this.batches.get(t)}async verifyBatch(t){let e=this.batches.get(t);return e||(e=Array.from(this.batches.values()).find(n=>n.tokenId===t)),e||null}exportBatchForQR(t){const e=this.batches.get(t);return e?{batchNumber:e.batchNumber,tokenId:e.tokenId,verificationUrl:`http://localhost:8080/verify/${e.batchNumber}`,productName:e.productName,manufacturingDate:e.manufacturingDate,expiryDate:e.expiryDate,status:e.status}:null}}const h=new l;export{l as default,h as transactionMonitoringService};
